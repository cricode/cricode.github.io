<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[程序员的自我修养]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://cricode.github.io/"/>
  <updated>2015-06-27T13:43:16.514Z</updated>
  <id>http://cricode.github.io/</id>
  
  <author>
    <name><![CDATA[CriCode]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python Logging　使用指南]]></title>
    <link href="http://cricode.github.io/2015/06/27/Python-Logging-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://cricode.github.io/2015/06/27/Python-Logging-使用指南/</id>
    <published>2015-06-27T13:36:46.000Z</published>
    <updated>2015-06-27T13:43:16.514Z</updated>
    <content type="html"><![CDATA[<p>在开发程序过程中，打一手好的日志，对我们事后追根索源，排查问题至关重要．<br>在初学c或者python时，我们的代码中通常充斥着这样的代码片段：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"a is %d"</span>,a)</span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'Start reading database'</span></span><br><span class="line">records = model.read_recrods()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'# records'</span>, records</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Updating record ...'</span></span><br><span class="line">model.update_records(records)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'done'</span></span><br></pre></td></tr></table></figure></p>
<p>虽然在现实的产品代码中，也偶尔会看到类似这种代码，但通常一个成熟的产品，都会有一个单独的日志模块供整个系统使用，我们应当保持正确的姿势来打日志．</p>
<h4 id="本文总结了python自带的日志模块logging使用，并给出几个实例．">本文总结了python自带的日志模块logging使用，并给出几个实例．</h4><h2 id="1-python_logging实例">1.python logging实例</h2><p>python中logging是一个单独的模块．使用灵活方便，支持以本地文件／socket／http等多种形式输出日志．<br>以下是一些最简单的logging使用实例．<br><strong>实例１：输出日志到控制台</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'this log should not be output,for the log level is logging.INFO'</span>)</span><br><span class="line">logger.info(<span class="string">'Start of test logging'</span>)</span><br><span class="line"><span class="comment"># do some logic</span></span><br><span class="line">logger.error(<span class="string">'something goes wrong'</span>)</span><br><span class="line">logger.warning(<span class="string">'please be careful'</span>)</span><br><span class="line">logger.info(<span class="string">'end of test logging'</span>)</span><br></pre></td></tr></table></figure></p>
<p>输出如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO:__main__:Start of test logging</span><br><span class="line">ERROR:__main__:something goes wrong</span><br><span class="line">WARNING:__main__:please be careful</span><br><span class="line">INFO:__main__:end of test logging</span><br></pre></td></tr></table></figure></p>
<p>实例１中的使用方式与我们直接使用print打印信息相比，除了日志级别控制外，并没有什么用．通常一个使用的日志信息，都会包含日志产生时间，产生该日志的源文件，代码所在行数等等这些信息．实例２中就将这两个东西<br><strong>实例２：输出日志到指定文档</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a file handler</span></span><br><span class="line">handler = logging.FileHandler(<span class="string">'test.log'</span>)</span><br><span class="line">handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a logging format</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(filename)s:%(lineno)d - %(levelname)s - %(message)s'</span>)</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the handlers to the logger</span></span><br><span class="line">logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">'hello,python!'</span>)</span><br></pre></td></tr></table></figure></p>
<p>上述代码通过引入handler和formatter来实现讲日志以特定的格式输出到指定日志文件中．<br>当然，很多时候，我们并不仅仅是像实例２中那样，讲日志写入本地文档，我们可以有一个日志分析／处理中心，不同的系统需要将各自的日志发送到特定的日志中心．此时，我们便需要使用到logging.handlers.HTTPHandler/logging.handlers.SocketHandler／logging.handlers.SMTPHandler等更高级的日志处理器来进行日志发送．使用方式详见python官方文档．</p>
<h2 id="2-如何正确的设置日志级别">2.如何正确的设置日志级别</h2><p>在合适的时候使用合适的日志输出级别．因为日志的输出是需要耗性能的，我们不能将所有情况都设为DEBUG级别，过多的日志也不便于我们进行分析．<br>以下搬运了一些他人的经验，仅供参考：<br><strong>1.使用DEBUG级别．</strong><br>在开发调式阶段，通常使用debug级别日志．例如，我们想查看一个算法执行过程中，中间变量的详细变换过程．例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex_algorithm</span><span class="params">(items)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(items):</span><br><span class="line">        <span class="comment"># do some complex algorithm computation</span></span><br><span class="line"></span><br><span class="line">        logger.debug(<span class="string">'%s iteration, item=%s'</span>, i, item)</span><br></pre></td></tr></table></figure></p>
<p><strong>2.使用INFO级别</strong><br>在web开发中，进行路由时输出info级别的日志．例如处理接受到的请求，服务器状态改变时等．<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_request</span><span class="params">(request)</span>:</span></span><br><span class="line">    logger.info(<span class="string">'Handling request %s'</span>, request)</span><br><span class="line">    <span class="comment"># handle request here</span></span><br><span class="line"></span><br><span class="line">    result = <span class="string">'result'</span></span><br><span class="line">    logger.info(<span class="string">'Return result: %s'</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_service</span><span class="params">()</span>:</span></span><br><span class="line">    logger.info(<span class="string">'Starting service at port %s ...'</span>, port)</span><br><span class="line">    service.start()</span><br><span class="line">    logger.info(<span class="string">'Service is started'</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>3.使用WARNING级别</strong><br>在一些比较重要的情形下可以输出warning级别的日志，例如，在用户登录输入的密码错误时，可以输出warning级别，此时需要引起注意，需查看是不是有人在蓄意进行暴力破旧等破坏操作．<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(user_name, password, ip_address)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> user_name != USER_NAME <span class="keyword">and</span> password != PASSWORD:</span><br><span class="line">        logger.warn(<span class="string">'Login attempt to %s from IP %s'</span>, user_name, ip_address)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="comment"># do authentication here</span></span><br></pre></td></tr></table></figure></p>
<p><strong>4.使用ERROR级别</strong><br>程序出现可预期的错误时，应当抛出一个错误日志．例如，数据库连接失败，IO读取出错等．<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_by_id</span><span class="params">(user_id)</span>:</span></span><br><span class="line">    user = db.read_user(user_id)</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        logger.error(<span class="string">'Cannot find user with user_id=%s'</span>, user_id)</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure></p>
<p><strong>5.使用CRITICAL级别</strong><br>critical级别的日志，通常使用的很少，只有在极个别情况下才会使用到．例如配置文件解析出错，磁盘满，内存不够等．</p>
<h2 id="3-几个Tips">3.几个Tips</h2><p>1.使用<strong>name</strong>作为logger的名字<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger = logging.<span class="function"><span class="title">getLogger</span><span class="params">(__name__)</span></span></span><br></pre></td></tr></table></figure></p>
<p>2.捕获异常，并使用traceback记录异常的详细信息<br>在实践中就会发现，大部分情况下，仅仅输出大概的出错信息并不能定位到具体出错原因，使用traceback方便定位具体原因．例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    open(<span class="string">'/path/to/does/not/exist'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="keyword">except</span> (SystemExit, KeyboardInterrupt):</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    logger.error(<span class="string">'Failed to open file'</span>, exc_info=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p>
<p>通过设置exc_info=True,则traceback信息会被输出到日志文件中．<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a file handler</span></span><br><span class="line">handler = logging.FileHandler(<span class="string">'test.log'</span>)</span><br><span class="line">handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a logging format</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'[%(levelname)s] %(asctime)s - %(filename)s:%(lineno)d  - %(message)s'</span>)</span><br><span class="line">handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the handlers to the logger</span></span><br><span class="line">logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    open(<span class="string">'/path/to/does/not/exist'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="keyword">except</span> (SystemExit, KeyboardInterrupt):</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    logger.error(<span class="string">'Failed to open file'</span>, exc_info=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p>
<p>上述程序的日志输出信息如下：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] <span class="number">2015</span>-<span class="number">06</span>-<span class="number">27</span> <span class="number">21</span>:<span class="number">32</span>:<span class="number">24</span>,<span class="number">127</span> - test.py:<span class="number">23</span>  - Failed <span class="keyword">to</span> <span class="keyword">open</span> <span class="keyword">file</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  <span class="keyword">File</span> <span class="string">"/home/jay/ITService/apps/ITBots/ITBots/test.py"</span>, line <span class="number">19</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">open</span>('/path/<span class="keyword">to</span>/does/<span class="keyword">not</span>/exist', <span class="attribute">'rb</span>')</span><br><span class="line">IOError: [Errno <span class="number">2</span>] No such <span class="keyword">file</span> <span class="keyword">or</span> directory: '/path/<span class="keyword">to</span>/does/<span class="keyword">not</span>/exist'</span><br></pre></td></tr></table></figure></p>
<p>参考：<br><a href="https://docs.python.org/2/howto/logging.html#logging-advanced-tutorial" target="_blank" rel="external">https://docs.python.org/2/howto/logging.html#logging-advanced-tutorial</a><br><a href="http://victorlin.me/posts/2012/08/26/good-logging-practice-in-python" target="_blank" rel="external">http://victorlin.me/posts/2012/08/26/good-logging-practice-in-python</a><br><a href="https://docs.python.org/2/howto/logging.html" target="_blank" rel="external">https://docs.python.org/2/howto/logging.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在开发程序过程中，打一手好的日志，对我们事后追根索源，排查问题至关重要．<br>在初学c或者python时，我们的代码中通常充斥着这样的代码片段：<br><figure class="highlight c"><table><tr><td class="gutter"><p]]>
    </summary>
    
      <category term="Python" scheme="http://cricode.github.io/tags/Python/"/>
    
      <category term="Python logging" scheme="http://cricode.github.io/tags/Python-logging/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spark计算平台搭建]]></title>
    <link href="http://cricode.github.io/2015/06/01/Spark%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://cricode.github.io/2015/06/01/Spark计算平台搭建/</id>
    <published>2015-06-01T14:43:54.000Z</published>
    <updated>2015-06-27T13:42:14.074Z</updated>
    <content type="html"><![CDATA[<h1 id="Spark计算平台搭建">Spark计算平台搭建</h1><h2 id="1-缘由">1.缘由</h2><p>团队当前的计算平台使用公司自研平台搭建.离线与实时计算平台由两拨人分别管理维护,随着新的需求越来越多,现在的计算平台使用不够友好,扩展不够方便,于是打算通过Spark重新搭建一个计算平台.</p>
<h2 id="2-平台功能">2.平台功能</h2><h4 id="1)实时计算任务-">1)实时计算任务.</h4><p>主要是完成一些实时性要求较高的日志分析统计.比如应用的pv,uv,停留时间,点击数据等.</p>
<h4 id="2)离线分析任务-">2)离线分析任务.</h4><p>无法通过实时完成统计的数据,例如一些订单数据分析,需要与第三方进行数据对接的数据等.</p>
<h4 id="3)自助查询分析-">3)自助查询分析.</h4><p>允许用户通过web UI进行自定义分析查询.<br>这个是比较个性化的需求,比如商家搞了一个活动,可能对一些统计参数进行埋点上报,活动搞完后,需要进行详细的活动效果分析.这时候,通过提供自助查询来进行分析,得到运营人员想要的数据,而不需要我们介入形形色色的个性化统计.</p>
<h4 id="4)推荐系统">4)推荐系统</h4><p>这个是后期需要考虑实现的.前期已经基于历史数据在公司的spark机群中进行了模型训练及推荐结果分析.<br>机器学习是个不太容易做好的东西,资源消耗也特别大,之前在公司的Spark机群,上千核CPU与单机内存上百G的资源供给下,有时候训练一次模型都要半小时一小时的,估计组内的Spark机群资源用于推荐系统是有点不够.</p>
<h2 id="3-平台资源">3.平台资源</h2><p>暂时弄了几台机器,搭建Spark on YARN计算平台.<br>计算资源:<br>Centos  12 core CPU  128G  RAM  (5台)<br>Web服务:<br>web服务使用jquery + bootstrap + nginx + tornado + Redis +MySQL的组合. </p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Spark计算平台搭建">Spark计算平台搭建</h1><h2 id="1-缘由">1.缘由</h2><p>团队当前的计算平台使用公司自研平台搭建.离线与实时计算平台由两拨人分别管理维护,随着新的需求越来越多,现在的计算平台使用不够友好,扩展不够方便,于是打算通]]>
    </summary>
    
      <category term="Spark" scheme="http://cricode.github.io/tags/Spark/"/>
    
      <category term="实时计算" scheme="http://cricode.github.io/tags/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97/"/>
    
      <category term="离线计算" scheme="http://cricode.github.io/tags/%E7%A6%BB%E7%BA%BF%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用SBT编译Spark应用]]></title>
    <link href="http://cricode.github.io/2015/05/30/%E4%BD%BF%E7%94%A8SBT%E7%BC%96%E8%AF%91Spark%E5%BA%94%E7%94%A8/"/>
    <id>http://cricode.github.io/2015/05/30/使用SBT编译Spark应用/</id>
    <published>2015-05-30T05:23:21.000Z</published>
    <updated>2015-05-30T05:37:40.573Z</updated>
    <content type="html"><![CDATA[<h2 id="sbt介绍">sbt介绍</h2><p>sbt即 Simple Build Tool,是一个构建工具,用来编译scala项目很方便.</p>
<h2 id="sbt安装">sbt安装</h2><p>官网地址: <a href="http://www.scala-sbt.org/" target="_blank" rel="external">http://www.scala-sbt.org/</a><br>中文参考: <a href="http://www.scala-sbt.org/0.13/tutorial/zh-cn/index.html" target="_blank" rel="external">http://www.scala-sbt.org/0.13/tutorial/zh-cn/index.html</a></p>
<h4 id="示例:在Ubuntu上安装sbt">示例:在Ubuntu上安装sbt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://dl.bintray.com/sbt/debian /"</span> | sudo tee <span class="operator">-a</span> /etc/apt/sources.list.d/sbt.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sbt</span><br></pre></td></tr></table></figure>
<h2 id="使用SBT编译spark应用">使用SBT编译spark应用</h2><p>通常情况下,我们的spark应用的目录结构如下所示:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|--build.sbt</span><br><span class="line">|--lib</span><br><span class="line">|--project</span><br><span class="line">|--src</span><br><span class="line">|   |--main</span><br><span class="line">|   |    |--scala</span><br><span class="line">|   |--test</span><br><span class="line">|         |--scala</span><br><span class="line">|--target</span><br></pre></td></tr></table></figure></p>
<h4 id="1)编辑build-sbt,_添加项目信息">1)编辑build.sbt, 添加项目信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name := <span class="string">"SparkPiTest"</span> //项目名称</span><br><span class="line"></span><br><span class="line">version := <span class="string">"0.1.0"</span>   //项目版本</span><br><span class="line"></span><br><span class="line">scalaVersion := <span class="string">"2.10.4"</span> //Scala的版本</span><br><span class="line"></span><br><span class="line">libraryDependencies += <span class="string">"org.apache.spark"</span> %% <span class="string">"spark-core"</span> % <span class="string">"1.3.1"</span>  //Spark版本</span><br><span class="line"></span><br><span class="line">resolvers += <span class="string">"Akka Repository"</span> at <span class="string">"http://repo.akka.io/releases/"</span></span><br></pre></td></tr></table></figure>
<p>build.sbt中指定了项目名称,scla的版本,依赖库等信息.</p>
<h4 id="2)添加Spark开发包到lib目录下">2)添加Spark开发包到lib目录下</h4><p>例如,将如下jar包copy到lib目录下:<br>spark-assembly-1.3.1-hadoop2.4.0.jar</p>
<h4 id="3)编写一个spark应用程序">3)编写一个spark应用程序</h4><p>在src/main/scala/目录下新建一个SparkPi.scala应用程序,如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sparkpi</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.math.random</span><br><span class="line"><span class="keyword">import</span> org.apache.spark._</span><br><span class="line"></span><br><span class="line">object SparkPi&#123;</span><br><span class="line">  <span class="function">def <span class="title">main</span><span class="params">(args: Array[String])</span> </span>&#123;</span><br><span class="line">    val conf = <span class="keyword">new</span> SparkConf().setAppName(<span class="string">"Spark Pi"</span>)</span><br><span class="line">    val spark = <span class="keyword">new</span> SparkContext(conf)</span><br><span class="line">    val slices = <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) args(<span class="number">0</span>).toInt <span class="keyword">else</span> <span class="number">2</span></span><br><span class="line">    val n = math.min(<span class="number">100000L</span> * slices, Int.MaxValue).toInt <span class="comment">// avoid overflow</span></span><br><span class="line">    val count = spark.parallelize(<span class="number">1</span> until n, slices).map &#123; i =&gt;</span><br><span class="line">      val x = random * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">      val y = random * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (x*x + y*y &lt; <span class="number">1</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    &#125;.reduce(_ + _)</span><br><span class="line">    println(<span class="string">"Pi is roughly "</span> + <span class="number">4.0</span> * count / n)</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="4)编译与打包">4)编译与打包</h4><p>在项目<strong>根目录</strong>中执行compile和package操作.命令如下:<br>sbt compile     //编译<br>sbt package   //打包</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="sbt介绍">sbt介绍</h2><p>sbt即 Simple Build Tool,是一个构建工具,用来编译scala项目很方便.</p>
<h2 id="sbt安装">sbt安装</h2><p>官网地址: <a href="http://www.scala-s]]>
    </summary>
    
      <category term="SBT" scheme="http://cricode.github.io/tags/SBT/"/>
    
      <category term="Spark" scheme="http://cricode.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://cricode.github.io/2015/05/27/hello-world/"/>
    <id>http://cricode.github.io/2015/05/27/hello-world/</id>
    <published>2015-05-27T11:52:46.532Z</published>
    <updated>2015-05-27T11:52:46.532Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>